import React from 'react';
import { format } from 'date-fns';
import { useCurrencyStore } from '../../stores/currencyStore';
import { formatCurrency } from '../../utils/currency';

interface PrintableReportProps {
  title: string;
  content: {
    sections: {
      title?: string;
      content: React.ReactNode;
    }[];
  };
  footer?: string;
}

export function PrintableReport({ title, content, footer }: PrintableReportProps) {
  const { currency } = useCurrencyStore();

  React.useEffect(() => {
    // Set page title
    document.title = title;

    // Auto-print when component mounts
    const printTimer = setTimeout(() => {
      window.print();
    }, 1000); // Increased timeout to ensure styles are loaded

    return () => clearTimeout(printTimer);
  }, [title]);

  return (
    <div className="print-container bg-white min-h-screen">
      {/* Header */}
      <header className="bg-primary-600 text-white p-8 print:p-6">
        <div className="max-w-4xl mx-auto">
          <h1 className="text-3xl font-bold">{title}</h1>
          <p className="mt-2 opacity-90">
            Generated on {format(new Date(), 'MMMM d, yyyy')}
          </p>
        </div>
      </header>

      {/* Content */}
      <main className="max-w-4xl mx-auto p-8 print:p-6">
        {content.sections.map((section, index) => (
          <section key={index} className="mb-8 break-inside-avoid-page">
            {section.title && (
              <h2 className="text-xl font-semibold text-gray-900 mb-4 pb-2 border-b border-gray-200">
                {section.title}
              </h2>
            )}
            <div className="print-content">
              {section.content}
            </div>
          </section>
        ))}
      </main>

      {/* Footer */}
      <footer className="fixed bottom-0 left-0 right-0 p-4 bg-gray-50 text-sm text-gray-600 print:absolute print:bg-transparent">
        <div className="max-w-4xl mx-auto">
          {footer && <p className="mb-1">{footer}</p>}
          <p>Generated by StewardTrack.com | {format(new Date(), 'MMMM d, yyyy h:mm a')}</p>
          <p className="text-right print:fixed print:bottom-4 print:right-4">
            Page <span className="pageNumber"></span>
          </p>
        </div>
      </footer>

      {/* Print Styles */}
      <style>{`
        @media print {
          @page {
            size: A4;
            margin: 15mm 10mm 20mm 10mm;
          }

          body {
            -webkit-print-color-adjust: exact !important;
            print-color-adjust: exact !important;
            background: white;
          }

          .print-container {
            margin: 0;
            padding: 0;
          }

          .pageNumber:before {
            content: counter(page);
          }

          table {
            page-break-inside: auto;
          }

          tr {
            page-break-inside: avoid;
            page-break-after: auto;
          }

          thead {
            display: table-header-group;
          }

          tfoot {
            display: table-footer-group;
          }

          section {
            page-break-inside: avoid;
          }

          header {
            -webkit-print-color-adjust: exact !important;
            print-color-adjust: exact !important;
            background-color: rgb(37, 99, 235) !important;
            color: white !important;
          }
        }

        /* Table Styles */
        .report-table {
          width: 100%;
          border-collapse: collapse;
          margin-bottom: 1.5rem;
          font-size: 0.875rem;
        }

        .report-table th {
          background-color: #f8fafc;
          padding: 0.75rem 1rem;
          text-align: left;
          font-weight: 600;
          color: #475569;
          border-bottom: 2px solid #e2e8f0;
          white-space: nowrap;
        }

        .report-table td {
          padding: 0.75rem 1rem;
          border-bottom: 1px solid #e2e8f0;
          vertical-align: middle;
        }

        .report-table tr:nth-child(even) {
          background-color: #f8fafc;
        }

        .report-table .amount {
          text-align: right;
          font-family: 'Courier New', Courier, monospace;
          white-space: nowrap;
        }

        .report-table .total-row {
          font-weight: 600;
          background-color: #f1f5f9;
        }

        .report-table .total-row td {
          border-top: 2px solid #e2e8f0;
          border-bottom: 2px solid #e2e8f0;
        }

        /* Progress bar styles */
        .progress-bar {
          height: 0.5rem;
          background-color: #e2e8f0;
          border-radius: 9999px;
          overflow: hidden;
        }

        .progress-bar-fill {
          height: 100%;
          border-radius: 9999px;
          transition: width 0.3s ease;
        }

        .progress-bar-fill.success { background-color: #22c55e; }
        .progress-bar-fill.warning { background-color: #f59e0b; }
        .progress-bar-fill.danger { background-color: #ef4444; }
      `}</style>
    </div>
  );
}

interface PrintableTableProps {
  headers: string[];
  data: any[][];
  className?: string;
}

export const PrintableTable: React.FC<PrintableTableProps> = ({ headers, data, className = '' }) => {
  const { currency } = useCurrencyStore();

  const formatCell = (value: any, index: number) => {
    if (index === 0) return value; // First column is usually description
    
    // Handle percentage values
    if (typeof value === 'string' && value.includes('%')) {
      return value;
    }

    // Handle numeric values
    if (typeof value === 'number' || !isNaN(parseFloat(value))) {
      const amount = Math.abs(parseFloat(value.toString()));
      return formatCurrency(amount, currency);
    }

    return value;
  };

  return (
    <table className={`report-table ${className}`}>
      <thead>
        <tr>
          {headers.map((header, i) => (
            <th key={i} className={i > 0 ? 'amount' : ''}>
              {header}
            </th>
          ))}
        </tr>
      </thead>
      <tbody>
        {data.map((row, i) => (
          <tr key={i} className={i === data.length - 1 ? 'total-row' : ''}>
            {row.map((cell, j) => (
              <td key={j} className={j > 0 ? 'amount' : ''}>
                {formatCell(cell, j)}
              </td>
            ))}
          </tr>
        ))}
      </tbody>
    </table>
  );
};